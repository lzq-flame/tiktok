// Code generated by Kitex v0.3.1. DO NOT EDIT.

package commentservice

import (
	"context"
	"example/cmd/comment/kitex_gen/comment"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return commentServiceServiceInfo
}

var commentServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "CommentService"
	handlerType := (*comment.CommentService)(nil)
	methods := map[string]kitex.MethodInfo{
		"AddComment":      kitex.NewMethodInfo(addCommentHandler, newAddCommentArgs, newAddCommentResult, false),
		"DelComment":      kitex.NewMethodInfo(delCommentHandler, newDelCommentArgs, newDelCommentResult, false),
		"GetCommentCount": kitex.NewMethodInfo(getCommentCountHandler, newGetCommentCountArgs, newGetCommentCountResult, false),
		"GetCommentList":  kitex.NewMethodInfo(getCommentListHandler, newGetCommentListArgs, newGetCommentListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "comment",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.3.1",
		Extra:           extra,
	}
	return svcInfo
}

func addCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.AddCommentRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentService).AddComment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *AddCommentArgs:
		success, err := handler.(comment.CommentService).AddComment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AddCommentResult)
		realResult.Success = success
	}
	return nil
}
func newAddCommentArgs() interface{} {
	return &AddCommentArgs{}
}

func newAddCommentResult() interface{} {
	return &AddCommentResult{}
}

type AddCommentArgs struct {
	Req *comment.AddCommentRequest
}

func (p *AddCommentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in AddCommentArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *AddCommentArgs) Unmarshal(in []byte) error {
	msg := new(comment.AddCommentRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AddCommentArgs_Req_DEFAULT *comment.AddCommentRequest

func (p *AddCommentArgs) GetReq() *comment.AddCommentRequest {
	if !p.IsSetReq() {
		return AddCommentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AddCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

type AddCommentResult struct {
	Success *comment.AddCommentResp
}

var AddCommentResult_Success_DEFAULT *comment.AddCommentResp

func (p *AddCommentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in AddCommentResult")
	}
	return proto.Marshal(p.Success)
}

func (p *AddCommentResult) Unmarshal(in []byte) error {
	msg := new(comment.AddCommentResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AddCommentResult) GetSuccess() *comment.AddCommentResp {
	if !p.IsSetSuccess() {
		return AddCommentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AddCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.AddCommentResp)
}

func (p *AddCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func delCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.DelCommentRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentService).DelComment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DelCommentArgs:
		success, err := handler.(comment.CommentService).DelComment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DelCommentResult)
		realResult.Success = success
	}
	return nil
}
func newDelCommentArgs() interface{} {
	return &DelCommentArgs{}
}

func newDelCommentResult() interface{} {
	return &DelCommentResult{}
}

type DelCommentArgs struct {
	Req *comment.DelCommentRequest
}

func (p *DelCommentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in DelCommentArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *DelCommentArgs) Unmarshal(in []byte) error {
	msg := new(comment.DelCommentRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DelCommentArgs_Req_DEFAULT *comment.DelCommentRequest

func (p *DelCommentArgs) GetReq() *comment.DelCommentRequest {
	if !p.IsSetReq() {
		return DelCommentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DelCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

type DelCommentResult struct {
	Success *comment.DelCommentResp
}

var DelCommentResult_Success_DEFAULT *comment.DelCommentResp

func (p *DelCommentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in DelCommentResult")
	}
	return proto.Marshal(p.Success)
}

func (p *DelCommentResult) Unmarshal(in []byte) error {
	msg := new(comment.DelCommentResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DelCommentResult) GetSuccess() *comment.DelCommentResp {
	if !p.IsSetSuccess() {
		return DelCommentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DelCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.DelCommentResp)
}

func (p *DelCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getCommentCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.GetCommentCountRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentService).GetCommentCount(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetCommentCountArgs:
		success, err := handler.(comment.CommentService).GetCommentCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetCommentCountResult)
		realResult.Success = success
	}
	return nil
}
func newGetCommentCountArgs() interface{} {
	return &GetCommentCountArgs{}
}

func newGetCommentCountResult() interface{} {
	return &GetCommentCountResult{}
}

type GetCommentCountArgs struct {
	Req *comment.GetCommentCountRequest
}

func (p *GetCommentCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetCommentCountArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetCommentCountArgs) Unmarshal(in []byte) error {
	msg := new(comment.GetCommentCountRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetCommentCountArgs_Req_DEFAULT *comment.GetCommentCountRequest

func (p *GetCommentCountArgs) GetReq() *comment.GetCommentCountRequest {
	if !p.IsSetReq() {
		return GetCommentCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetCommentCountArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetCommentCountResult struct {
	Success *comment.GetCommentCountResp
}

var GetCommentCountResult_Success_DEFAULT *comment.GetCommentCountResp

func (p *GetCommentCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetCommentCountResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetCommentCountResult) Unmarshal(in []byte) error {
	msg := new(comment.GetCommentCountResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetCommentCountResult) GetSuccess() *comment.GetCommentCountResp {
	if !p.IsSetSuccess() {
		return GetCommentCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetCommentCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.GetCommentCountResp)
}

func (p *GetCommentCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getCommentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment.GetCommentListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment.CommentService).GetCommentList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetCommentListArgs:
		success, err := handler.(comment.CommentService).GetCommentList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetCommentListResult)
		realResult.Success = success
	}
	return nil
}
func newGetCommentListArgs() interface{} {
	return &GetCommentListArgs{}
}

func newGetCommentListResult() interface{} {
	return &GetCommentListResult{}
}

type GetCommentListArgs struct {
	Req *comment.GetCommentListRequest
}

func (p *GetCommentListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetCommentListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetCommentListArgs) Unmarshal(in []byte) error {
	msg := new(comment.GetCommentListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetCommentListArgs_Req_DEFAULT *comment.GetCommentListRequest

func (p *GetCommentListArgs) GetReq() *comment.GetCommentListRequest {
	if !p.IsSetReq() {
		return GetCommentListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetCommentListArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetCommentListResult struct {
	Success *comment.GetCommentListResp
}

var GetCommentListResult_Success_DEFAULT *comment.GetCommentListResp

func (p *GetCommentListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetCommentListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetCommentListResult) Unmarshal(in []byte) error {
	msg := new(comment.GetCommentListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetCommentListResult) GetSuccess() *comment.GetCommentListResp {
	if !p.IsSetSuccess() {
		return GetCommentListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetCommentListResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment.GetCommentListResp)
}

func (p *GetCommentListResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AddComment(ctx context.Context, Req *comment.AddCommentRequest) (r *comment.AddCommentResp, err error) {
	var _args AddCommentArgs
	_args.Req = Req
	var _result AddCommentResult
	if err = p.c.Call(ctx, "AddComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DelComment(ctx context.Context, Req *comment.DelCommentRequest) (r *comment.DelCommentResp, err error) {
	var _args DelCommentArgs
	_args.Req = Req
	var _result DelCommentResult
	if err = p.c.Call(ctx, "DelComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCommentCount(ctx context.Context, Req *comment.GetCommentCountRequest) (r *comment.GetCommentCountResp, err error) {
	var _args GetCommentCountArgs
	_args.Req = Req
	var _result GetCommentCountResult
	if err = p.c.Call(ctx, "GetCommentCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCommentList(ctx context.Context, Req *comment.GetCommentListRequest) (r *comment.GetCommentListResp, err error) {
	var _args GetCommentListArgs
	_args.Req = Req
	var _result GetCommentListResult
	if err = p.c.Call(ctx, "GetCommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
