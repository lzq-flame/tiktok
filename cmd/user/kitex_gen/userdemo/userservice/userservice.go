// Code generated by Kitex v0.3.1. DO NOT EDIT.

package userservice

import (
	"context"
	"example/cmd/user/kitex_gen/userdemo"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*userdemo.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CheckUser":   kitex.NewMethodInfo(checkUserHandler, newCheckUserArgs, newCheckUserResult, false),
		"CreateUser":  kitex.NewMethodInfo(createUserHandler, newCreateUserArgs, newCreateUserResult, false),
		"GetUsers":    kitex.NewMethodInfo(getUsersHandler, newGetUsersArgs, newGetUsersResult, false),
		"AddFollower": kitex.NewMethodInfo(addFollowerHandler, newAddFollowerArgs, newAddFollowerResult, false),
		"RmFollower":  kitex.NewMethodInfo(rmFollowerHandler, newRmFollowerArgs, newRmFollowerResult, false),
		"GetFollow":   kitex.NewMethodInfo(getFollowHandler, newGetFollowArgs, newGetFollowResult, false),
		"GetFollower": kitex.NewMethodInfo(getFollowerHandler, newGetFollowerArgs, newGetFollowerResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.3.1",
		Extra:           extra,
	}
	return svcInfo
}

func checkUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userdemo.CheckUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userdemo.UserService).CheckUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CheckUserArgs:
		success, err := handler.(userdemo.UserService).CheckUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CheckUserResult)
		realResult.Success = success
	}
	return nil
}
func newCheckUserArgs() interface{} {
	return &CheckUserArgs{}
}

func newCheckUserResult() interface{} {
	return &CheckUserResult{}
}

type CheckUserArgs struct {
	Req *userdemo.CheckUserRequest
}

func (p *CheckUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CheckUserArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CheckUserArgs) Unmarshal(in []byte) error {
	msg := new(userdemo.CheckUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CheckUserArgs_Req_DEFAULT *userdemo.CheckUserRequest

func (p *CheckUserArgs) GetReq() *userdemo.CheckUserRequest {
	if !p.IsSetReq() {
		return CheckUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CheckUserArgs) IsSetReq() bool {
	return p.Req != nil
}

type CheckUserResult struct {
	Success *userdemo.CheckUserResp
}

var CheckUserResult_Success_DEFAULT *userdemo.CheckUserResp

func (p *CheckUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CheckUserResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CheckUserResult) Unmarshal(in []byte) error {
	msg := new(userdemo.CheckUserResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CheckUserResult) GetSuccess() *userdemo.CheckUserResp {
	if !p.IsSetSuccess() {
		return CheckUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CheckUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*userdemo.CheckUserResp)
}

func (p *CheckUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func createUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userdemo.CreateUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userdemo.UserService).CreateUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateUserArgs:
		success, err := handler.(userdemo.UserService).CreateUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateUserResult)
		realResult.Success = success
	}
	return nil
}
func newCreateUserArgs() interface{} {
	return &CreateUserArgs{}
}

func newCreateUserResult() interface{} {
	return &CreateUserResult{}
}

type CreateUserArgs struct {
	Req *userdemo.CreateUserRequest
}

func (p *CreateUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CreateUserArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CreateUserArgs) Unmarshal(in []byte) error {
	msg := new(userdemo.CreateUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateUserArgs_Req_DEFAULT *userdemo.CreateUserRequest

func (p *CreateUserArgs) GetReq() *userdemo.CreateUserRequest {
	if !p.IsSetReq() {
		return CreateUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateUserArgs) IsSetReq() bool {
	return p.Req != nil
}

type CreateUserResult struct {
	Success *userdemo.CreateUserResp
}

var CreateUserResult_Success_DEFAULT *userdemo.CreateUserResp

func (p *CreateUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CreateUserResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CreateUserResult) Unmarshal(in []byte) error {
	msg := new(userdemo.CreateUserResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateUserResult) GetSuccess() *userdemo.CreateUserResp {
	if !p.IsSetSuccess() {
		return CreateUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*userdemo.CreateUserResp)
}

func (p *CreateUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getUsersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userdemo.GetUsersRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userdemo.UserService).GetUsers(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetUsersArgs:
		success, err := handler.(userdemo.UserService).GetUsers(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUsersResult)
		realResult.Success = success
	}
	return nil
}
func newGetUsersArgs() interface{} {
	return &GetUsersArgs{}
}

func newGetUsersResult() interface{} {
	return &GetUsersResult{}
}

type GetUsersArgs struct {
	Req *userdemo.GetUsersRequest
}

func (p *GetUsersArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetUsersArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetUsersArgs) Unmarshal(in []byte) error {
	msg := new(userdemo.GetUsersRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUsersArgs_Req_DEFAULT *userdemo.GetUsersRequest

func (p *GetUsersArgs) GetReq() *userdemo.GetUsersRequest {
	if !p.IsSetReq() {
		return GetUsersArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUsersArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetUsersResult struct {
	Success *userdemo.GetUsersResp
}

var GetUsersResult_Success_DEFAULT *userdemo.GetUsersResp

func (p *GetUsersResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetUsersResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetUsersResult) Unmarshal(in []byte) error {
	msg := new(userdemo.GetUsersResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUsersResult) GetSuccess() *userdemo.GetUsersResp {
	if !p.IsSetSuccess() {
		return GetUsersResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUsersResult) SetSuccess(x interface{}) {
	p.Success = x.(*userdemo.GetUsersResp)
}

func (p *GetUsersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func addFollowerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userdemo.AddFollowerRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userdemo.UserService).AddFollower(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *AddFollowerArgs:
		success, err := handler.(userdemo.UserService).AddFollower(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AddFollowerResult)
		realResult.Success = success
	}
	return nil
}
func newAddFollowerArgs() interface{} {
	return &AddFollowerArgs{}
}

func newAddFollowerResult() interface{} {
	return &AddFollowerResult{}
}

type AddFollowerArgs struct {
	Req *userdemo.AddFollowerRequest
}

func (p *AddFollowerArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in AddFollowerArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *AddFollowerArgs) Unmarshal(in []byte) error {
	msg := new(userdemo.AddFollowerRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AddFollowerArgs_Req_DEFAULT *userdemo.AddFollowerRequest

func (p *AddFollowerArgs) GetReq() *userdemo.AddFollowerRequest {
	if !p.IsSetReq() {
		return AddFollowerArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AddFollowerArgs) IsSetReq() bool {
	return p.Req != nil
}

type AddFollowerResult struct {
	Success *userdemo.AddFollowerResp
}

var AddFollowerResult_Success_DEFAULT *userdemo.AddFollowerResp

func (p *AddFollowerResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in AddFollowerResult")
	}
	return proto.Marshal(p.Success)
}

func (p *AddFollowerResult) Unmarshal(in []byte) error {
	msg := new(userdemo.AddFollowerResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AddFollowerResult) GetSuccess() *userdemo.AddFollowerResp {
	if !p.IsSetSuccess() {
		return AddFollowerResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AddFollowerResult) SetSuccess(x interface{}) {
	p.Success = x.(*userdemo.AddFollowerResp)
}

func (p *AddFollowerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func rmFollowerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userdemo.RmFollowerRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userdemo.UserService).RmFollower(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RmFollowerArgs:
		success, err := handler.(userdemo.UserService).RmFollower(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RmFollowerResult)
		realResult.Success = success
	}
	return nil
}
func newRmFollowerArgs() interface{} {
	return &RmFollowerArgs{}
}

func newRmFollowerResult() interface{} {
	return &RmFollowerResult{}
}

type RmFollowerArgs struct {
	Req *userdemo.RmFollowerRequest
}

func (p *RmFollowerArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in RmFollowerArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *RmFollowerArgs) Unmarshal(in []byte) error {
	msg := new(userdemo.RmFollowerRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RmFollowerArgs_Req_DEFAULT *userdemo.RmFollowerRequest

func (p *RmFollowerArgs) GetReq() *userdemo.RmFollowerRequest {
	if !p.IsSetReq() {
		return RmFollowerArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RmFollowerArgs) IsSetReq() bool {
	return p.Req != nil
}

type RmFollowerResult struct {
	Success *userdemo.RmFollowerResp
}

var RmFollowerResult_Success_DEFAULT *userdemo.RmFollowerResp

func (p *RmFollowerResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in RmFollowerResult")
	}
	return proto.Marshal(p.Success)
}

func (p *RmFollowerResult) Unmarshal(in []byte) error {
	msg := new(userdemo.RmFollowerResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RmFollowerResult) GetSuccess() *userdemo.RmFollowerResp {
	if !p.IsSetSuccess() {
		return RmFollowerResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RmFollowerResult) SetSuccess(x interface{}) {
	p.Success = x.(*userdemo.RmFollowerResp)
}

func (p *RmFollowerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getFollowHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userdemo.GetFollowRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userdemo.UserService).GetFollow(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFollowArgs:
		success, err := handler.(userdemo.UserService).GetFollow(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFollowResult)
		realResult.Success = success
	}
	return nil
}
func newGetFollowArgs() interface{} {
	return &GetFollowArgs{}
}

func newGetFollowResult() interface{} {
	return &GetFollowResult{}
}

type GetFollowArgs struct {
	Req *userdemo.GetFollowRequest
}

func (p *GetFollowArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFollowArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFollowArgs) Unmarshal(in []byte) error {
	msg := new(userdemo.GetFollowRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFollowArgs_Req_DEFAULT *userdemo.GetFollowRequest

func (p *GetFollowArgs) GetReq() *userdemo.GetFollowRequest {
	if !p.IsSetReq() {
		return GetFollowArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFollowArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetFollowResult struct {
	Success *userdemo.GetFollowResp
}

var GetFollowResult_Success_DEFAULT *userdemo.GetFollowResp

func (p *GetFollowResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFollowResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFollowResult) Unmarshal(in []byte) error {
	msg := new(userdemo.GetFollowResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFollowResult) GetSuccess() *userdemo.GetFollowResp {
	if !p.IsSetSuccess() {
		return GetFollowResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFollowResult) SetSuccess(x interface{}) {
	p.Success = x.(*userdemo.GetFollowResp)
}

func (p *GetFollowResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getFollowerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userdemo.GetFollowerRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userdemo.UserService).GetFollower(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFollowerArgs:
		success, err := handler.(userdemo.UserService).GetFollower(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFollowerResult)
		realResult.Success = success
	}
	return nil
}
func newGetFollowerArgs() interface{} {
	return &GetFollowerArgs{}
}

func newGetFollowerResult() interface{} {
	return &GetFollowerResult{}
}

type GetFollowerArgs struct {
	Req *userdemo.GetFollowerRequest
}

func (p *GetFollowerArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFollowerArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFollowerArgs) Unmarshal(in []byte) error {
	msg := new(userdemo.GetFollowerRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFollowerArgs_Req_DEFAULT *userdemo.GetFollowerRequest

func (p *GetFollowerArgs) GetReq() *userdemo.GetFollowerRequest {
	if !p.IsSetReq() {
		return GetFollowerArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFollowerArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetFollowerResult struct {
	Success *userdemo.GetFollowerResp
}

var GetFollowerResult_Success_DEFAULT *userdemo.GetFollowerResp

func (p *GetFollowerResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFollowerResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFollowerResult) Unmarshal(in []byte) error {
	msg := new(userdemo.GetFollowerResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFollowerResult) GetSuccess() *userdemo.GetFollowerResp {
	if !p.IsSetSuccess() {
		return GetFollowerResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFollowerResult) SetSuccess(x interface{}) {
	p.Success = x.(*userdemo.GetFollowerResp)
}

func (p *GetFollowerResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CheckUser(ctx context.Context, Req *userdemo.CheckUserRequest) (r *userdemo.CheckUserResp, err error) {
	var _args CheckUserArgs
	_args.Req = Req
	var _result CheckUserResult
	if err = p.c.Call(ctx, "CheckUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateUser(ctx context.Context, Req *userdemo.CreateUserRequest) (r *userdemo.CreateUserResp, err error) {
	var _args CreateUserArgs
	_args.Req = Req
	var _result CreateUserResult
	if err = p.c.Call(ctx, "CreateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUsers(ctx context.Context, Req *userdemo.GetUsersRequest) (r *userdemo.GetUsersResp, err error) {
	var _args GetUsersArgs
	_args.Req = Req
	var _result GetUsersResult
	if err = p.c.Call(ctx, "GetUsers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddFollower(ctx context.Context, Req *userdemo.AddFollowerRequest) (r *userdemo.AddFollowerResp, err error) {
	var _args AddFollowerArgs
	_args.Req = Req
	var _result AddFollowerResult
	if err = p.c.Call(ctx, "AddFollower", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RmFollower(ctx context.Context, Req *userdemo.RmFollowerRequest) (r *userdemo.RmFollowerResp, err error) {
	var _args RmFollowerArgs
	_args.Req = Req
	var _result RmFollowerResult
	if err = p.c.Call(ctx, "RmFollower", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollow(ctx context.Context, Req *userdemo.GetFollowRequest) (r *userdemo.GetFollowResp, err error) {
	var _args GetFollowArgs
	_args.Req = Req
	var _result GetFollowResult
	if err = p.c.Call(ctx, "GetFollow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollower(ctx context.Context, Req *userdemo.GetFollowerRequest) (r *userdemo.GetFollowerResp, err error) {
	var _args GetFollowerArgs
	_args.Req = Req
	var _result GetFollowerResult
	if err = p.c.Call(ctx, "GetFollower", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
