// Code generated by Kitex v0.3.1. DO NOT EDIT.

package userservice

import (
	"context"
	"example/cmd/user/kitex_gen/userdemo"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CheckUser(ctx context.Context, Req *userdemo.CheckUserRequest, callOptions ...callopt.Option) (r *userdemo.CheckUserResp, err error)
	CreateUser(ctx context.Context, Req *userdemo.CreateUserRequest, callOptions ...callopt.Option) (r *userdemo.CreateUserResp, err error)
	GetUsers(ctx context.Context, Req *userdemo.GetUsersRequest, callOptions ...callopt.Option) (r *userdemo.GetUsersResp, err error)
	AddFollower(ctx context.Context, Req *userdemo.AddFollowerRequest, callOptions ...callopt.Option) (r *userdemo.AddFollowerResp, err error)
	RmFollower(ctx context.Context, Req *userdemo.RmFollowerRequest, callOptions ...callopt.Option) (r *userdemo.RmFollowerResp, err error)
	GetFollow(ctx context.Context, Req *userdemo.GetFollowRequest, callOptions ...callopt.Option) (r *userdemo.GetFollowResp, err error)
	GetFollower(ctx context.Context, Req *userdemo.GetFollowerRequest, callOptions ...callopt.Option) (r *userdemo.GetFollowerResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kUserServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kUserServiceClient struct {
	*kClient
}

func (p *kUserServiceClient) CheckUser(ctx context.Context, Req *userdemo.CheckUserRequest, callOptions ...callopt.Option) (r *userdemo.CheckUserResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CheckUser(ctx, Req)
}

func (p *kUserServiceClient) CreateUser(ctx context.Context, Req *userdemo.CreateUserRequest, callOptions ...callopt.Option) (r *userdemo.CreateUserResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateUser(ctx, Req)
}

func (p *kUserServiceClient) GetUsers(ctx context.Context, Req *userdemo.GetUsersRequest, callOptions ...callopt.Option) (r *userdemo.GetUsersResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUsers(ctx, Req)
}

func (p *kUserServiceClient) AddFollower(ctx context.Context, Req *userdemo.AddFollowerRequest, callOptions ...callopt.Option) (r *userdemo.AddFollowerResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddFollower(ctx, Req)
}

func (p *kUserServiceClient) RmFollower(ctx context.Context, Req *userdemo.RmFollowerRequest, callOptions ...callopt.Option) (r *userdemo.RmFollowerResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RmFollower(ctx, Req)
}

func (p *kUserServiceClient) GetFollow(ctx context.Context, Req *userdemo.GetFollowRequest, callOptions ...callopt.Option) (r *userdemo.GetFollowResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFollow(ctx, Req)
}

func (p *kUserServiceClient) GetFollower(ctx context.Context, Req *userdemo.GetFollowerRequest, callOptions ...callopt.Option) (r *userdemo.GetFollowerResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFollower(ctx, Req)
}
